git服务器的搭建：
	@1安装git 	
		sudo apt-get install git
	@2创建一个git账户
		sudo adduser git
	@3创建登陆证书
		收集所有需要登录用户的公钥（id_rsa.pub文件），把所有公钥导入到/home/git/.ssh/authorized_keys文件里，
		一行一个。
	@4初始化git仓库
		到自定义目录下执行 $sudo git init --bare code.git  git会创建一个裸仓库，裸仓库就是没有工作区，原因是服务器
		上的仓库是为了多人协作时共享，不允许用户直接登录到服务器去修改工作区，并且服务器上的仓库通常以.git结尾。
		把owner改为git $sudo chown -R git:git code.git  
	@5禁止shell登录
		出于安全考虑，git用户不允许登录shell，通过修改/etc/passwd文件完成。
		修改： 	git:x:1001:1001:,,,:/home/git/:/bin/bash
		修改为：git:x:1001:1001:,,,:/home/git/:/usr/bin/git-shell
		这样git用户可以通过ssh使用git，但无法登录shell
	@6克隆仓库
		git clone git@server:/code/code.git
		
首次运行git前配置：
	@1配置文件
		/etc/gitconfig文件：系统中对所有用户都生效的配置文件 $git config --system
		~/.gitconfig文件：用户配置文件 $git config --global
		当前项目中的.git/gitconfig文件只对当前项目有效，每个级别的配置都会覆盖上层配置，所有.git/gitconfig回覆盖
		/etc/gitconfig中的同名变量。
	@2用户信息
		git提交时用到的信息
		git config --global user.email "you@example.com"
		git config --global user.name "Your Name"
	@3文本编辑器
		git config --global code.editor vim
	@4差异分析工具
		git config --global merge.tool vimdiff
	@5查看配置信息
		git config --list
	
	
		



1.创建版本库(repository)
	什么是版本库？版本库可以看作是一个目录，这个目录里的所有文件都可以被git管理起来，每个文件的
	修改、删除 、git都能跟踪。
	命令：git init  //Create an empty Git repository or reinitialize an existing one

2.把文件添加到版本库
	所有的版本控制管理系统都只能跟踪文本文件的改动（包括git），建议使用UTF-8以便实现对多平台的支持。
	命令：git add file/.  //Add file contents to the index
		  git commit -m "xxx" //Record changes to the repository
3.状态查询：
		  git status //Show the working tree status
		  git log (--pretty=oneline)//Show commit logs 
		  git reflog 查看历史分支的变化
		  git diff HEAD -- file 查看工作区与版本库的区别
		  
		  (use "git add <file>..." to update what will be committed)
		  (use "git checkout -- <file>..." to discard changes in working directory)
		  (use "git reset HEAD <file>..." to unstage)
		  
4.版本回退
	命令：git reset  //Reset current HEAD to the specified state
		  git reset --hard HEAD^(上一个版本)|HEAD^^(上上个版本) HEAD~10(前10个版本)
		  git reset --hard 4fffef4a1...(版本号不需要写全 commit id)
		  git checkout -- <file> 丢弃工作区的修改（无--为切换分支命令），从版本区直接回退到工作区
			@1 file修改后还未add，则回退到最新一次commit状态
			@2 file修改后已add，则回退到最新一次add状态
		  git reset HEAD file //unstage 撤销暂存区的修改，从版本库回退到暂存区
		  
		  
		  时间轴：                                                     _____
																	  |HEAD | 
		                                                                 |											                
																		 |
			 _______________          __________________          ______\|/_______
			|               |        |                  |        |                |
	        |				|------->|                  |------->|                |
			|_______________|        |__________________|        |________________|
			commit id:xxx...a         commit id:xxx...b           commit id:xxx...c
5.版本库
	工作区的隐藏目录.git是git版本库
	 ___work___           ___repository________________________________________
	|	       |         |    _____________             __________________     |    
	|		   |         |   |             |           |                  |    |
	|  file    |---add------>| index/stage |--commit-->|   master branch  |    |
	|          |         |   |_____________|           |__________________|    |        
	|__________|         |_____________________________________________________|
	
6.删除文件
	1.git rm file
	2.git commit -m "delete file"
	git rm仅删除最新版本文件，误删除时可进行版本回退

